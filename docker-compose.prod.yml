version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-mess_management}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application
  web:
    build:
      context: .
      target: production
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=mess_management.settings.production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-mess_management}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TG_IDS=${ADMIN_TG_IDS}
      - QR_SECRET=${QR_SECRET}
      - STAFF_SCANNER_PASSWORD=${STAFF_SCANNER_PASSWORD}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SHEETS_CREDENTIALS_JSON=${SHEETS_CREDENTIALS_JSON}
      - SHEETS_SPREADSHEET_ID=${SHEETS_SPREADSHEET_ID}
      - TIMEZONE=Asia/Kolkata
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn --config docker/gunicorn.conf.py mess_management.wsgi:application
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  worker:
    build:
      context: .
      target: production
    volumes:
      - media_files:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=mess_management.settings.production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-mess_management}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TG_IDS=${ADMIN_TG_IDS}
      - QR_SECRET=${QR_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SHEETS_CREDENTIALS_JSON=${SHEETS_CREDENTIALS_JSON}
      - SHEETS_SPREADSHEET_ID=${SHEETS_SPREADSHEET_ID}
      - TIMEZONE=Asia/Kolkata
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A mess_management worker --loglevel=info --concurrency=4
    restart: unless-stopped

  # Telegram Bot
  telegram-bot:
    build:
      context: .
      target: production
    environment:
      - DJANGO_SETTINGS_MODULE=mess_management.settings.production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-mess_management}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - ADMIN_TG_IDS=${ADMIN_TG_IDS}
      - QR_SECRET=${QR_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SHEETS_CREDENTIALS_JSON=${SHEETS_CREDENTIALS_JSON}
      - SHEETS_SPREADSHEET_ID=${SHEETS_SPREADSHEET_ID}
      - TIMEZONE=Asia/Kolkata
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python manage.py run_telegram_bot --polling
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_files:
  media_files:

networks:
  default:
    driver: bridge
