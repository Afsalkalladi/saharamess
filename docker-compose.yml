version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mess_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application
  web:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static_files:/app/staticfiles
      - media_files:/app/media
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mess_management
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TG_IDS=${ADMIN_TG_IDS}
      - QR_SECRET=${QR_SECRET:-dev-qr-secret-key}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - SHEETS_CREDENTIALS_JSON=${SHEETS_CREDENTIALS_JSON}
      - SHEETS_SPREADSHEET_ID=${SHEETS_SPREADSHEET_ID}
      - TIMEZONE=Asia/Kolkata
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  worker:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - media_files:/app/media
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mess_management
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TG_IDS=${ADMIN_TG_IDS}
      - QR_SECRET=${QR_SECRET:-dev-qr-secret-key}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - SHEETS_CREDENTIALS_JSON=${SHEETS_CREDENTIALS_JSON}
      - SHEETS_SPREADSHEET_ID=${SHEETS_SPREADSHEET_ID}
      - TIMEZONE=Asia/Kolkata
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A mess_management worker --loglevel=info --concurrency=2
    healthcheck:
      test: ["CMD-SHELL", "celery -A mess_management inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Scheduler)
  beat:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - beat_data:/app/celerybeat-schedule
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mess_management
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TG_IDS=${ADMIN_TG_IDS}
      - QR_SECRET=${QR_SECRET:-dev-qr-secret-key}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - SHEETS_CREDENTIALS_JSON=${SHEETS_CREDENTIALS_JSON}
      - SHEETS_SPREADSHEET_ID=${SHEETS_SPREADSHEET_ID}
      - TIMEZONE=Asia/Kolkata
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A mess_management beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Nginx (for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot (separate service)
  telegram-bot:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mess_management
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - ADMIN_TG_IDS=${ADMIN_TG_IDS}
      - QR_SECRET=${QR_SECRET:-dev-qr-secret-key}
      - CLOUDINARY_URL=${CLOUDINARY_URL}
      - SHEETS_CREDENTIALS_JSON=${SHEETS_CREDENTIALS_JSON}
      - SHEETS_SPREADSHEET_ID=${SHEETS_SPREADSHEET_ID}
      - TIMEZONE=Asia/Kolkata
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python manage.py run_telegram_bot
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_files:
  media_files:
  beat_data:

networks:
  default:
    driver: bridge