# Generated by Django 5.0.6 on 2025-08-16 19:23

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Settings",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("tz", models.CharField(default="Asia/Kolkata", max_length=50)),
                ("cutoff_time", models.TimeField(default="23:00")),
                ("qr_secret_version", models.IntegerField(default=1)),
                ("qr_secret_hash", models.CharField(max_length=255)),
                ("meals", models.JSONField(default=dict)),
            ],
            options={
                "verbose_name_plural": "Settings",
                "db_table": "settings",
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "actor_type",
                    models.CharField(
                        choices=[
                            ("STUDENT", "Student"),
                            ("ADMIN", "Admin"),
                            ("STAFF", "Staff"),
                            ("SYSTEM", "System"),
                        ],
                        max_length=10,
                    ),
                ),
                ("actor_id", models.CharField(blank=True, max_length=100, null=True)),
                ("event_type", models.CharField(max_length=50)),
                ("payload", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "audit_logs",
                "indexes": [
                    models.Index(
                        fields=["created_at"], name="audit_logs_created_262184_idx"
                    ),
                    models.Index(
                        fields=["actor_type", "actor_id"],
                        name="audit_logs_actor_t_3f370f_idx",
                    ),
                    models.Index(
                        fields=["event_type"], name="audit_logs_event_t_3207df_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DLQLog",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("operation", models.CharField(max_length=50)),
                ("payload", models.JSONField()),
                ("error_message", models.TextField()),
                ("retry_count", models.IntegerField(default=0)),
                ("processed", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "dlq_logs",
                "indexes": [
                    models.Index(
                        fields=["processed", "created_at"],
                        name="dlq_logs_process_6579ae_idx",
                    ),
                    models.Index(
                        fields=["operation"], name="dlq_logs_operati_b69cab_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MessClosure",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("from_date", models.DateField()),
                ("to_date", models.DateField()),
                ("reason", models.TextField(blank=True)),
                ("created_by_admin_id", models.BigIntegerField()),
            ],
            options={
                "db_table": "mess_closures",
                "indexes": [
                    models.Index(
                        fields=["from_date", "to_date"],
                        name="mess_closur_from_da_151c53_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="StaffToken",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("label", models.CharField(max_length=100)),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("token_hash", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "db_table": "staff_tokens",
                "indexes": [
                    models.Index(
                        fields=["token_hash"], name="staff_token_token_h_1e62e9_idx"
                    ),
                    models.Index(
                        fields=["active"], name="staff_token_active_d78267_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tg_user_id",
                    models.BigIntegerField(help_text="Telegram user ID", unique=True),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "roll_no",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z0-9]+$",
                                "Roll number must contain only uppercase letters and numbers",
                            )
                        ],
                    ),
                ),
                ("room_no", models.CharField(max_length=20)),
                (
                    "phone",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\+?[1-9]\\d{1,14}$", "Enter a valid phone number"
                            )
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("DENIED", "Denied"),
                        ],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                ("qr_version", models.IntegerField(default=1)),
                ("qr_nonce", models.CharField(blank=True, max_length=50)),
            ],
            options={
                "db_table": "students",
                "indexes": [
                    models.Index(
                        fields=["tg_user_id"], name="students_tg_user_ef40bf_idx"
                    ),
                    models.Index(
                        fields=["roll_no"], name="students_roll_no_eef286_idx"
                    ),
                    models.Index(fields=["status"], name="students_status_3ac771_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="ScanEvent",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "meal",
                    models.CharField(
                        choices=[
                            ("BREAKFAST", "Breakfast"),
                            ("LUNCH", "Lunch"),
                            ("DINNER", "Dinner"),
                        ],
                        max_length=10,
                    ),
                ),
                ("scanned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("ALLOWED", "Allowed"),
                            ("BLOCKED_NO_PAYMENT", "Blocked - No Payment"),
                            ("BLOCKED_CUT", "Blocked - Mess Cut"),
                            ("BLOCKED_STATUS", "Blocked - Status Issue"),
                        ],
                        max_length=20,
                    ),
                ),
                ("device_info", models.TextField(blank=True)),
                (
                    "staff_token",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.stafftoken",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scan_events",
                        to="core.student",
                    ),
                ),
            ],
            options={
                "db_table": "scan_events",
                "indexes": [
                    models.Index(
                        fields=["student", "scanned_at"],
                        name="scan_events_student_4335aa_idx",
                    ),
                    models.Index(
                        fields=["scanned_at"], name="scan_events_scanned_aba776_idx"
                    ),
                    models.Index(
                        fields=["meal", "scanned_at"],
                        name="scan_events_meal_14d2b3_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("cycle_start", models.DateField()),
                ("cycle_end", models.DateField()),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("screenshot_url", models.URLField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NONE", "None"),
                            ("UPLOADED", "Uploaded"),
                            ("VERIFIED", "Verified"),
                            ("DENIED", "Denied"),
                        ],
                        default="NONE",
                        max_length=15,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("ONLINE_SCREENSHOT", "Online Screenshot"),
                            ("OFFLINE_MANUAL", "Offline Manual"),
                        ],
                        default="ONLINE_SCREENSHOT",
                        max_length=20,
                    ),
                ),
                ("reviewer_admin_id", models.BigIntegerField(blank=True, null=True)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="core.student",
                    ),
                ),
            ],
            options={
                "db_table": "payments",
                "indexes": [
                    models.Index(
                        fields=["student", "cycle_start", "status"],
                        name="payments_student_06dcde_idx",
                    ),
                    models.Index(fields=["status"], name="payments_status_d621e5_idx"),
                    models.Index(
                        fields=["cycle_start", "cycle_end"],
                        name="payments_cycle_s_add4bf_idx",
                    ),
                ],
                "unique_together": {("student", "cycle_start")},
            },
        ),
        migrations.CreateModel(
            name="MessCut",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("from_date", models.DateField()),
                ("to_date", models.DateField()),
                ("applied_at", models.DateTimeField(auto_now_add=True)),
                (
                    "applied_by",
                    models.CharField(
                        choices=[
                            ("STUDENT", "Student"),
                            ("ADMIN_SYSTEM", "Admin System"),
                        ],
                        default="STUDENT",
                        max_length=15,
                    ),
                ),
                (
                    "cutoff_ok",
                    models.BooleanField(
                        default=True, help_text="Whether cutoff rule was respected"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mess_cuts",
                        to="core.student",
                    ),
                ),
            ],
            options={
                "db_table": "mess_cuts",
                "indexes": [
                    models.Index(
                        fields=["student", "from_date", "to_date"],
                        name="mess_cuts_student_aed2ee_idx",
                    ),
                    models.Index(
                        fields=["from_date", "to_date"],
                        name="mess_cuts_from_da_b2ba5d_idx",
                    ),
                ],
            },
        ),
    ]
